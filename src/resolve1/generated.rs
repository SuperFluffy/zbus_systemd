// This file is autogenerated, do not manually edit.

use zbus::dbus_proxy;

/// Proxy object for `org.freedesktop.resolve1.Manager`.
#[dbus_proxy(
    interface = "org.freedesktop.resolve1.Manager",
    gen_blocking = false,
    default_service = "org.freedesktop.resolve1",
    default_path = "/org/freedesktop/resolve1"
)]
trait Manager {
    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#GetLink()) Call interface method `GetLink`.
    #[dbus_proxy(name = "GetLink")]
    fn get_link(&self, ifindex: i32) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#SetLinkDomains()) Call interface method `SetLinkDomains`.
    #[dbus_proxy(name = "SetLinkDomains")]
    fn set_link_domains(&self, ifindex: i32, domains: Vec<(String, bool)>) -> zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#SetLinkDefaultRoute()) Call interface method `SetLinkDefaultRoute`.
    #[dbus_proxy(name = "SetLinkDefaultRoute")]
    fn set_link_default_route(&self, ifindex: i32, enable: bool) -> zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#SetLinkLLMNR()) Call interface method `SetLinkLLMNR`.
    #[dbus_proxy(name = "SetLinkLLMNR")]
    fn set_link_llmnr(&self, ifindex: i32, mode: String) -> zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#SetLinkMulticastDNS()) Call interface method `SetLinkMulticastDNS`.
    #[dbus_proxy(name = "SetLinkMulticastDNS")]
    fn set_link_multicast_dns(&self, ifindex: i32, mode: String) -> zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#SetLinkDNSOverTLS()) Call interface method `SetLinkDNSOverTLS`.
    #[dbus_proxy(name = "SetLinkDNSOverTLS")]
    fn set_link_dns_over_tls(&self, ifindex: i32, mode: String) -> zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#SetLinkDNSSEC()) Call interface method `SetLinkDNSSEC`.
    #[dbus_proxy(name = "SetLinkDNSSEC")]
    fn set_link_dnssec(&self, ifindex: i32, mode: String) -> zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#SetLinkDNSSECNegativeTrustAnchors()) Call interface method `SetLinkDNSSECNegativeTrustAnchors`.
    #[dbus_proxy(name = "SetLinkDNSSECNegativeTrustAnchors")]
    fn set_link_dnssec_negative_trust_anchors(
        &self,
        ifindex: i32,
        names: Vec<String>,
    ) -> zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#RevertLink()) Call interface method `RevertLink`.
    #[dbus_proxy(name = "RevertLink")]
    fn revert_link(&self, ifindex: i32) -> zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#UnregisterService()) Call interface method `UnregisterService`.
    #[dbus_proxy(name = "UnregisterService")]
    fn unregister_service(&self, service_path: zbus::zvariant::OwnedObjectPath)
        -> zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#ResetStatistics()) Call interface method `ResetStatistics`.
    #[dbus_proxy(name = "ResetStatistics")]
    fn reset_statistics(&self) -> zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#FlushCaches()) Call interface method `FlushCaches`.
    #[dbus_proxy(name = "FlushCaches")]
    fn flush_caches(&self) -> zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#ResetServerFeatures()) Call interface method `ResetServerFeatures`.
    #[dbus_proxy(name = "ResetServerFeatures")]
    fn reset_server_features(&self) -> zbus::Result<()>;

    /// Get property `LLMNRHostname`.
    #[dbus_proxy(property, name = "LLMNRHostname")]
    fn llmnr_hostname(&self) -> zbus::Result<String>;

    /// Get property `LLMNR`.
    #[dbus_proxy(property, name = "LLMNR")]
    fn llmnr(&self) -> zbus::Result<String>;

    /// Get property `MulticastDNS`.
    #[dbus_proxy(property, name = "MulticastDNS")]
    fn multicast_dns(&self) -> zbus::Result<String>;

    /// Get property `DNSOverTLS`.
    #[dbus_proxy(property, name = "DNSOverTLS")]
    fn dns_over_tls(&self) -> zbus::Result<String>;

    /// Get property `DNSSEC`.
    #[dbus_proxy(property, name = "DNSSEC")]
    fn dnssec(&self) -> zbus::Result<String>;

    /// Get property `DNSSECSupported`.
    #[dbus_proxy(property, name = "DNSSECSupported")]
    fn dnssec_supported(&self) -> zbus::Result<bool>;

    /// Get property `DNSSECNegativeTrustAnchors`.
    #[dbus_proxy(property, name = "DNSSECNegativeTrustAnchors")]
    fn dnssec_negative_trust_anchors(&self) -> zbus::Result<Vec<String>>;

    /// Get property `DNSStubListener`.
    #[dbus_proxy(property, name = "DNSStubListener")]
    fn dns_stub_listener(&self) -> zbus::Result<String>;

    /// Get property `ResolvConfMode`.
    #[dbus_proxy(property, name = "ResolvConfMode")]
    fn resolv_conf_mode(&self) -> zbus::Result<String>;
}

/// Proxy object for `org.freedesktop.resolve1.Link`.
#[dbus_proxy(
    interface = "org.freedesktop.resolve1.Link",
    gen_blocking = false,
    default_service = "org.freedesktop.resolve1"
)]
trait Link {
    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#SetDomains()) Call interface method `SetDomains`.
    #[dbus_proxy(name = "SetDomains")]
    fn set_domains(&self, domains: Vec<(String, bool)>) -> zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#SetDefaultRoute()) Call interface method `SetDefaultRoute`.
    #[dbus_proxy(name = "SetDefaultRoute")]
    fn set_default_route(&self, enable: bool) -> zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#SetLLMNR()) Call interface method `SetLLMNR`.
    #[dbus_proxy(name = "SetLLMNR")]
    fn set_llmnr(&self, mode: String) -> zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#SetMulticastDNS()) Call interface method `SetMulticastDNS`.
    #[dbus_proxy(name = "SetMulticastDNS")]
    fn set_multicast_dns(&self, mode: String) -> zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#SetDNSOverTLS()) Call interface method `SetDNSOverTLS`.
    #[dbus_proxy(name = "SetDNSOverTLS")]
    fn set_dns_over_tls(&self, mode: String) -> zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#SetDNSSEC()) Call interface method `SetDNSSEC`.
    #[dbus_proxy(name = "SetDNSSEC")]
    fn set_dnssec(&self, mode: String) -> zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#SetDNSSECNegativeTrustAnchors()) Call interface method `SetDNSSECNegativeTrustAnchors`.
    #[dbus_proxy(name = "SetDNSSECNegativeTrustAnchors")]
    fn set_dnssec_negative_trust_anchors(&self, names: Vec<String>) -> zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#Revert()) Call interface method `Revert`.
    #[dbus_proxy(name = "Revert")]
    fn revert(&self) -> zbus::Result<()>;

    /// Get property `ScopesMask`.
    #[dbus_proxy(property, name = "ScopesMask")]
    fn scopes_mask(&self) -> zbus::Result<u64>;

    /// Get property `Domains`.
    #[dbus_proxy(property, name = "Domains")]
    fn domains(&self) -> zbus::Result<Vec<(String, bool)>>;

    /// Get property `DefaultRoute`.
    #[dbus_proxy(property, name = "DefaultRoute")]
    fn default_route(&self) -> zbus::Result<bool>;

    /// Get property `LLMNR`.
    #[dbus_proxy(property, name = "LLMNR")]
    fn llmnr(&self) -> zbus::Result<String>;

    /// Get property `MulticastDNS`.
    #[dbus_proxy(property, name = "MulticastDNS")]
    fn multicast_dns(&self) -> zbus::Result<String>;

    /// Get property `DNSOverTLS`.
    #[dbus_proxy(property, name = "DNSOverTLS")]
    fn dns_over_tls(&self) -> zbus::Result<String>;

    /// Get property `DNSSEC`.
    #[dbus_proxy(property, name = "DNSSEC")]
    fn dnssec(&self) -> zbus::Result<String>;

    /// Get property `DNSSECNegativeTrustAnchors`.
    #[dbus_proxy(property, name = "DNSSECNegativeTrustAnchors")]
    fn dnssec_negative_trust_anchors(&self) -> zbus::Result<Vec<String>>;

    /// Get property `DNSSECSupported`.
    #[dbus_proxy(property, name = "DNSSECSupported")]
    fn dnssec_supported(&self) -> zbus::Result<bool>;
}
